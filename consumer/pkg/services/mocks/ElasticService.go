// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/usernamesalah/news/consumer/pkg/models"
)

// ElasticService is an autogenerated mock type for the ElasticService type
type ElasticService struct {
	mock.Mock
}

// CheckExist provides a mock function with given fields: ctx
func (_m *ElasticService) CheckExist(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, news
func (_m *ElasticService) Create(ctx context.Context, news models.News) (models.News, error) {
	ret := _m.Called(ctx, news)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(context.Context, models.News) models.News); ok {
		r0 = rf(ctx, news)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.News) error); ok {
		r1 = rf(ctx, news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, rows, page
func (_m *ElasticService) Get(ctx context.Context, rows int, page int) ([]models.News, error) {
	ret := _m.Called(ctx, rows, page)

	var r0 []models.News
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []models.News); ok {
		r0 = rf(ctx, rows, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, rows, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ElasticService) GetByID(ctx context.Context, id int64) (models.News, error) {
	ret := _m.Called(ctx, id)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.News); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
