// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/usernamesalah/news/producer/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// NewsService is an autogenerated mock type for the NewsService type
type NewsService struct {
	mock.Mock
}

// CreateNews provides a mock function with given fields: ctx, news
func (_m *NewsService) CreateNews(ctx context.Context, news models.News) (models.News, error) {
	ret := _m.Called(ctx, news)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(context.Context, models.News) models.News); ok {
		r0 = rf(ctx, news)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.News) error); ok {
		r1 = rf(ctx, news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNews provides a mock function with given fields: ctx, id
func (_m *NewsService) DeleteNews(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNews provides a mock function with given fields: ctx, id
func (_m *NewsService) GetNews(ctx context.Context, id int64) (models.News, error) {
	ret := _m.Called(ctx, id)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.News); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNews provides a mock function with given fields: ctx
func (_m *NewsService) ListNews(ctx context.Context) ([]models.News, error) {
	ret := _m.Called(ctx)

	var r0 []models.News
	if rf, ok := ret.Get(0).(func(context.Context) []models.News); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNews provides a mock function with given fields: ctx, news
func (_m *NewsService) UpdateNews(ctx context.Context, news models.News) (models.News, error) {
	ret := _m.Called(ctx, news)

	var r0 models.News
	if rf, ok := ret.Get(0).(func(context.Context, models.News) models.News); ok {
		r0 = rf(ctx, news)
	} else {
		r0 = ret.Get(0).(models.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.News) error); ok {
		r1 = rf(ctx, news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
